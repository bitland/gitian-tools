#!/usr/bin/python

'''Gitian package builder'''

import sys
import os
import git
import yaml
import fnmatch
import shutil
from gitian_util import *
from optparse import OptionParser
#from gettext import gettext as _

if __name__ == "__main__":
  parser = OptionParser()
  parser.prog = "gitian package-build"
  optparser_extend(parser)
  parser.add_option ("-d", "--dest",
      dest="dest",
      help="Destination directory (default ROOT/dist)")
  (options, args) = parser.parse_args()
  if not args:
    parser.error("must supply .gdsc file")
    exit(1)

  if options.dest:
    destination = os.path.abspath(options.dest)
  else:
    destination = "dist"
  gems_destination = os.path.join(destination, "rubygems/gems")

  dsc_f = open(args[0])
  package_dir = os.path.dirname(args[0])

  os.chdir(package_dir)

  dsc = yaml.load(dsc_f)
  name = dsc['name']

  ptr_f = open(name + '.vcptr')
  ptr = yaml.load(ptr_f)

  if not os.access("build", os.F_OK):
    res = os.system("git clone --no-checkout '%s' build" % (ptr['url']))
    if res != 0:
      print >> sys.stderr, "git clone failed"
      sys.exit(1)

  res = os.system("cd build && git reset --hard '%s'" % (ptr['commit']))
  if res != 0:
    print >> sys.stderr, "git reset failed"
    sys.exit(1)

  res = os.system("cd build && git clean -d -f -x")
  if res != 0:
    print >> sys.stderr, "git clean failed"
    sys.exit(1)

  if dsc['packager'] == 'rubygems':
    rake_cmd = dsc.get('packager_options', {}).get('rake_cmd', 'rake gem')
    packages = dsc.get('packages')
    if packages:
      for package in packages:
	print "Building package %s" % (package)
	# default to package name
	dir = dsc['directories'].get(package, package)
	res = os.system("cd build/%s && %s" % (dir, rake_cmd))
	if res != 0:
	  print >> sys.stderr, "build in build/%s failed" % (dir)
	  sys.exit(1)
    else:
      package = name
      print "Building package %s" % (package)
      res = os.system("cd build && %s" % (rake_cmd))
      if res != 0:
	print >> sys.stderr, "build in build/ failed"
	sys.exit(1)
    for dirpath, dirs, files in os.walk('build'):
      for file in fnmatch.filter(files, '*.gem'):
	if not os.access(gems_destination, os.F_OK):
	  os.makedirs(gems_destination)
	shutil.copy(os.path.join(dirpath, file), gems_destination)
  else:
    print >> sys.stderr, "unknown packager %s" % (dsc['packager'])
    
