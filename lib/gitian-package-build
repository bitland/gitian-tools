#!/usr/bin/python

'''Gitian package builder'''

import sys
import os
import git
from gitian_util import *
from optparse import OptionParser
#from gettext import gettext as _

def ensure_rubygems_installed(dest):
    gemhome = os.path.join(dest, ".gem")
    if not os.access(os.path.join(gemhome, "bin", "gem1.8"), os.F_OK):
        (package_dir, control, ptr) = open_package("rubygems")
        os.chdir(package_dir)

        prepare_build_package(control, ptr)
        res = os.system("cd build && ruby setup.rb --no-ri --no-rdoc --prefix=%s" % (gemhome))
        if res != 0 or not os.access(os.path.join(gemhome, "bin", "gem1.8"), os.F_OK):
            print >>sys.stderr, "build failed in %s" % (dir)
            sys.exit(1)
    local_rubygems_rb = os.path.join(gemhome, "lib", "local_rubygems.rb")
    if not os.access(local_rubygems_rb, os.F_OK):
        rb_f = open(local_rubygems_rb, "w")
        print >>rb_f, """require "rubygems" 
Gem.configuration = Gem::ConfigFile.new [ "--config-file=/dev/null" ] 
Gem.sources = ["/dev/null"]
Gem.use_paths(ENV['GEM_HOME'], [ENV['GEM_HOME']])
"""
        rb_f.close()
    gemrc = os.path.join(dest, "gemrc")
    if not os.access(gemrc, os.F_OK):
        gemrc_f = open(gemrc, "w")
        print >>gemrc_f, """---
:gemhome: %s
:gempath:
- %s
:sources:
- bogus:
"""%(gemhome, gemhome)
        gemrc_f.close()
    os.environ['GEM_HOME'] = gemhome
    os.environ['RUBYLIB'] = os.path.join(gemhome, "lib")

if __name__ == "__main__":
    parser = OptionParser()
    parser.prog = "gitian package-build"
    optparser_extend(parser)
    parser.add_option ("-d", "--dest",
                       dest="dest",
                       help="Destination directory (default ROOT/dist)")
    parser.usage = """gitian package-new [-c COMMIT] REPOS-URL [NAME]
or:
    gitian package-new GITHUB-COMMIT-URL [NAME]
  Creates a package within a Gitian repository
"""
    (options, args) = parser.parse_args()
    if not args:
        parser.error("must supply package name")
        exit(1)

    repos = repository_root()

    if options.dest:
        destination = os.path.abspath(options.dest)
    else:
        destination = os.path.join(repos, "dist")

    name = args[0]
    (package_dir, control, ptr) = open_package(name)

    if control['packager'] == 'rubygems':
        ensure_rubygems_installed(destination)
        ensure_gem_installed('rake', destination)
        build_gem(package_dir, control, ptr, destination)
        copy_gems_to_dist(destination)
    else:
        print >> sys.stderr, "unknown packager %s" % (control['packager'])
        
