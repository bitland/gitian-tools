#!/usr/bin/python

'''Gitian release builder'''

import sys
import os
import yaml
import fnmatch
import glob
import shutil
from gitian_util import *
from optparse import OptionParser
#from gettext import gettext as _

if __name__ == "__main__":
  parser = OptionParser()
  parser.prog = "gitian release-build"
  optparser_extend(parser)
  parser.add_option ("-c", "--clean", default=False, action="store_true",
      dest="clean",
      help="Clean dist directory first")
  parser.add_option ("-n", "--dry-run", default=False, action="store_true",
      dest="dryrun",
      help="Do not actually build anything, but still generate release index")

  (options, args) = parser.parse_args()
  if not os.access("gitian-repos", os.F_OK):
    print >> sys.stderr, "must be run within the gitian repository"
    exit(1)
  
  if options.clean and os.access('dist', os.F_OK):
    shutil.rmtree('dist')

  if options.clean and os.access('stage', os.F_OK):
    shutil.rmtree('stage')
  
  for dsc in glob.glob('packages/*/*.gdsc'):
    if options.dryrun:
      print dsc
      continue
    res = os.system(find_command("package-build") + " --dest %s %s"%
                    ('stage', dsc))
    if res != 0:
      print >> sys.stderr, "build failed for %s"% (dsc)
      sys.exit(1)

  if not os.access('dist/rubygems/gems', os.F_OK):
    os.makedirs('dist/rubygems/gems')

  for gem_file in glob.glob('stage/rubygems/gems/*.gem'):
    new_file = os.path.join('dist/rubygems/gems', os.path.basename(gem_file))
    os.system(find_command("gem-signer") + ' "%s" "%s"'%(gem_file, new_file))

  if (os.access('dist/rubygems', os.F_OK)):
    res = os.system("gem generate_index --directory dist/rubygems")
    if res != 0:
      print >> sys.stderr, "gem generate_index failed"
      sys.exit(1)
